#!/bin/bash -e
#
# Script to update WordPress and its plugins by command line interface using WP-CLI
# Date: 3/11/2015
# Author: Rebecca Appleton
# NOTES: If PHP Notices appear in the terminal and you don't want them to, be aware
# that having the following setting in your wp_config.php file causes errors in plugins 
# to be displayed in the terminal by WP-CLI and it's not a big concern (though you
# might want to contact your plugin's writer to tell them about it so they can fix it):
# 
# define('WP_DEBUG', false); // enable debugging mode
# 
# 
# 


### Some globals
# The location of this file is sometimes helpful to us so these globals hold that info
THIS_SCRIPT=`basename $0`
THIS_SCRIPT_DIR=`dirname $0`
# Adjust the following to set output files
REPORT_FILE=~/bin/updates.txt # File to write pretty reports to
LOGS_PARENT_DIR="/root/logs" 	# Parent directory where this script's log files will be stored



# ### Command parameters

site=$1

### Require root credentials to run this script
#
if [ "$(whoami)" != 'root' ]; then
	echo "You have no permission to run $0 as non-root user. Use sudo"
	exit 1
fi

### Require WP-CLI be installed
#
command -v wp >/dev/null 2>&1 || { echo >&2 "You need to have WP-CLI installed and in your path as 'wp' to use this script."; exit 1; }



### Some functions to update core, plugin and themes


# Do core update
#
function do_core_update {

	# Print to terminal what we're doing
	printf "$(timestamp) Checking if WordPress core is up-to-date...\n"
	printf "$(timestamp) Checking for WordPress core updates...\n" >> $LOG_FILE

	current_version=$(wp core version --allow-root)
	current_version=$(echo $current_version) # Remove newline char at end
	new_update_version=$(wp core check-update --field=version --allow-root)
	new_update_version=$(echo $new_update_version) # Remove newline char at end
	report='' # what we'll be printing by way of a report

	if [[ $new_update_version == "Success: WordPress is at the latest version." ]]; then
		# Print version check result to terminal							
		printf "$(timestamp) Already at latest version of WordPress core.\n"	

		# Print to report what updates were made
		report=$(printf "No WordPress core updates to install.\n")
															# 
	else
		printf "$(timestamp) Updating WordPress core from $current_version to $new_update_version...\n"	
		$(wp core update --allow-root)

		$check_if_uptodate=$(wp core check-update --field=version --allow-root)

		if [[ $check_if_uptodate="Success: WordPress is at the latest version." ]]; then
			# Print result to terminal
			printf "$(timestamp) Success! WordPress is at the latest version.\n"		
			# Add a line to the report string if update was successful
			report=$(printf "Updated WordPress from $current_version to $new_update_version.\n")	
		else
			# Print result to terminal
			printf "$(timestamp) Failed when trying to update WordPress from $current_version to $new_update_version.\n"	
			# Add a line to the report string noting there was a failure
			report=$(printf "Tried to update WordPress from $current_version to $new_update_version but update failed; a human should check this, please.\n")
		fi
	fi

	# Print report and log file entry
	printf '%s' "$(timestamp) $report" >> $LOG_FILE
	printf '%s' "$report" >> $REPORT_FILE
}


# Do plugins update
#
function do_plugins_update {

	printf "$(timestamp) Checking for plugin updates...\n"
	printf "\n$(timestamp) Checking plugins...\n" >> $LOG_FILE

	# Get a list of slugs representing the plugins that want updating
	plugins_needing_updates=$(wp plugin list --field=name --update=available --allow-root) # returns a list we can parse line by line

	report="" # what we'll be printing by way of a report

	for slug in $plugins_needing_updates; do

		# Get the plugin's name
		name=$(wp plugin get $slug --field=title --allow-root)
		name=$(echo $name) # Remove newline char at end

		# Get the current version
		ver=$(wp plugin get $slug --field=version --allow-root)
		ver=$(echo $ver) # Remove newline char at end

		# Print to screen and logfile that we're about to begin updating the plugin
		printf "$(timestamp) Starting update of plugin %s (currently at version %s)...\n" "$name" "$ver"	
		printf "$(timestamp) Starting update of plugin %s (currently at version %s).\n" "$name" "$ver" >> $LOG_FILE

		# Do the update
		updating="$(wp plugin update $slug --format=summary --allow-root --debug=false)"
		
		# Check the version now (to see if successfully updated)
		new_ver="$(wp plugin get $slug --field=version --allow-root)"
		new_ver=$(echo $new_ver) # Remove newline char at end
		

		if [[ $new_ver != $ver ]]; then
			# Print success message to screen
			printf "$(timestamp) Successfully updated %s from %s to %s.\n" "$name" "$ver" "$new_ver"
			# Print success message to $report var and log file
			printf "$(timestamp) Successfully updated %s from %s to %s.\n" "$name" "$ver" "$new_ver" >> $LOG_FILE			
			report="$report $(printf "\nUpdated %s from %s to %s." "$name" "$ver" "$new_ver")"
		else
			# Print failure message to screen, log file and report var
			printf "$(timestamp) Failed to update %s from %s to %s.\n" "$name" "$ver" "$new_ver"
			printf "$(timestamp) Failed to update %s from %s to %s.\n" "$name" "$ver" "$new_ver" >> $LOG_FILE			
			report="$report $(printf "\nTried to update %s from %s to %s but update failed. A human should check this, please." "$name" "$var" "$new_ver")"
		fi

	done

	# Print to log file that no updates were needed if that's the case, else print 
	# the accumulated report string to the report file here.
	report_length=$(printf "%s" "$report"|wc -c)
	if [[ $report_length -lt 1 ]]; then
		# Print to screen and to report string that no plugin updates were found/needed
		printf "$(timestamp) No plugin updates were found.\n"
		report="$report $(printf '\n%s\n' "No plugin updates were found.")"
		# Log this assessment
		printf "$(timestamp) Found no plugin updates to install.\n" >> $LOG_FILE
	else
		# Print report of plugins updated and log printing
		printf "$(timestamp) Updates to site complete. Printing to report." >> $LOG_FILE
	fi

	# Print to report what updates were made
	printf '%s\n' "$report" >> "$REPORT_FILE"
}


function do_formatted_intro {

	name_of_site=$(wp option get blogname --allow-root)
	name_of_site=$(echo $name_of_site) # Remove newline char at end

	url=$(wp option get siteurl --allow-root)
	url=$(echo $url) # Remove newline char at end

	intro=$(printf "\n----------------------------------------------------------\n$(date)\n$name_of_site\n$url\n----------------------------------------------------------\n")
	
	printf '\n%s\n' "$intro" >> $REPORT_FILE
}


function timestamp() {
	date +"%T" # %T = display time only
}


function datestamp() {
	date +"%Y-%m-%d"
}


### Check input: we need a site, and it must match a folder we're hosting in our /sites dir
if [[ "$site" == '' ]]; then
	echo -e "You need to enter a site to upgrade. (Should correspond to the name of the folder in the /sites directory.)";
	exit 1;
else
	# Do check to ensure we have a folder match
	cd /sites
	match=false
	for dir in *; do
		if [[ "$dir" == "$site" ]]; then
		  match=true
		  break
		fi
	done

	### If we have a match, switch to the target dir and run some WP-CLI commands else quit out
	if [[ "$match" == false ]]; then
		echo -e "Parameter supplied should correspond to the name of the folder in the /sites directory."
		exit 1
	else
		path="/sites/$dir/www/htdocs"
		cd $path

		### Set us up the log and report files
		#
		#$(mkdir $LOGS_PARENT_DIR/wordpress_updates) # works
		$([ -d $LOGS_PARENT_DIR/wordpress_updates ] || mkdir $LOGS_PARENT_DIR/wordpress_updates)
		LOGS_PATH=$LOGS_PARENT_DIR/wordpress_updates
		LOG_FILE=$LOGS_PATH/$(datestamp)_wordpress_updates.log


		### Kick off the updates for a site!
		#
		name_of_site=$(wp option get blogname --allow-root)
		name_of_site=$(echo $name_of_site) # Remove newline char at end

		url=$(wp option get siteurl --allow-root)
		url=$(echo $url) # Remove newline char at end

		printf "$(timestamp) Checking for updates required on %s (%s)\n" "$name_of_site" "$url"
		printf "$(timestamp) Running update script on $name_of_site ($url)\n" >> $LOG_FILE

		# Print pretty report intro
		do_formatted_intro

		# Check/update WordPress core
		do_core_update

		# Check/update WordPress plugins
		do_plugins_update
	fi

fi
